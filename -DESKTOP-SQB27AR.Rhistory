#install.packages("plotly")
#install.packages("tmap")
#required libraries
library(ggplot2) #library for visualization and plotting.
library(sf) #Spatial objects package, very useful for vector data types
library(raster) #Spatial object package for raster type data
library(rgdal) #Spatial objects
library(dplyr) #Cleaning and data wrangling
library(tidyr) #Very large package for data organization
library(plotly) #Makes ggplots interactive
library(tmap) #Another interactive map package
#file that contains over 75K of specimen data with lat/long coordinates
specimen_data <- read.delim(file="occurrence.txt",header=TRUE)
#NOTE: If this returns Error in file(file, “rt”) : cannot open the connection, then most likely this is a path issue specific to your computer. First try changing the code to: specimen_data <- read.delim(file ="filter_polygon/occurrence.txt",header=TRUE)
#remove rows where order, lat/long do not exist
specimen_data <- subset(specimen_data, !is.na(order) & !is.na(decimalLongitude) & !is.na(decimalLatitude))
#read boundary from shp file
copr_boundary_2020 <- st_read("COPR_Boundary_2010/COPR_boundary2010.shp") #Vector type.
#NOTE: If this is unable to be read it may again be a path issue, try: copr_boundary_2020 <- st_read("filter_polygon/COPR_Boundary_2010/COPR_boundary2010.shp")
#What is the projection of copr_boundary_2020
#Global datum is NAD83. California zone 5 is code: ESPG:2229.
#A great site for looking up crs info: https://spatialreference.org/
crs(copr_boundary_2020)
crs(specimen_data) #NA so it hasnt been assigned a crs.
#Another method for storing crs's is to place them in a data column. Lets look at the names of the data columns.
names(specimen_data)
#There are some here that look like they could be right, however if you filter them out you will find that they do not yield a crs.
#While looking at these some important column names are 134 and 133 which contain decimal latitude and decimal longitude, as well as column 194 that contains taxonomic Order of the specimen found.
specimen_data_order <- specimen_data[c(134, 133, 194)]
#draw boundary from shp file
ggplot() +
geom_sf(data = copr_boundary_2020, fill = "palegreen", color = "black")
ggplot() +
geom_sf(data = copr_boundary_2020, fill = "palegreen", color = "black") +
geom_point(data = specimen_data_order, aes(x = decimalLongitude, y = decimalLatitude), shape = 1)
#No they will not plot together since they have different CRSs
#Technically the ESPG:4269 (NAD83) and ESPG:4326 (WGS84) are not equivalent, for most applications they can treated as equivalent.
#First lets change the txt. data into a sf object that uses the standard crs = 4326 for latlong.
occur_sf_order <- st_as_sf(specimen_data_order, coords = c('decimalLongitude', 'decimalLatitude'), crs = 4326)
extent(occur_sf_order)
extent(copr_boundary_2020)
#Now lets transform this new sf object to the crs using our boundary data
occur_sf_order_new <- st_transform(occur_sf_order,
st_crs(copr_boundary_2020))
#Check the extents, they appear to be in the same range
extent(occur_sf_order_new)
extent(copr_boundary_2020)
ggplot() +
geom_sf(data = copr_boundary_2020, fill = "palegreen", color = "black") +
geom_sf(occur_sf_order_new, mapping = aes(geometry = geometry), size = 1) +
ggtitle("Occurence of Plant Specimens at Coal Oil Point")
#Okay, it seems that the data is including lots of points that are outside the specified range of the boundary shape
occur_sf_order_new_subset <- occur_sf_order_new[copr_boundary_2020,]
ggplot() +
geom_sf(data = copr_boundary_2020, fill = "palegreen", color = "black") +
geom_sf(occur_sf_order_new_subset, mapping = aes(geometry = geometry), size = 1) +
ggtitle("Occurence of Plant Specimens within Coal Oil Point")
#And thats what we want!
##Export as a csv file
directory <- getwd()
directory
#write.csv(occur_sf_order_new_subset, "C:/Users/JTroo/Desktop/Github/occurence_maps/occurrence-maps/filter_polygon/occur.csv", row.names = TRUE)
#So this is the exported dataframe for just taxonomy and geo coordinates.
write.csv(occurence_order_subset_sep_unique, "C:/Users/jtmil/OneDrive/Desktop/CCBER/occurrence-maps/filter_polygon/occur3", row.names = TRUE)
#Now lets graph by order.
Order_Plot <- ggplot() +
geom_sf(data = copr_boundary_2020, fill = "grey", color = "black") +
geom_sf(occur_sf_order_new_subset, mapping = aes(geometry = geometry, color = order,)) +
ggtitle("Distribution of identified organisms within Coal Oil Point") +
labs( x = "Longitude", y = "Latitude") +
theme_gray() +
theme(legend.key.size = unit(0.5, "cm"),
axis.text = element_text(size = 7),
)
Order_Plot #While this is more informative, its rather hard to read
#Seems we need to seperate out the geometry column into new columns
occurence_order_subset_sep <- occur_sf_order_new_subset %>%
dplyr::mutate(lat = sf::st_coordinates(.)[,2],
lon = sf::st_coordinates(.)[,1])
occurence_order_subset_sep
#This is the correct way to sum up counts of the observations per coordinate point
occurence_order_subset_sep_unique <- occurence_order_subset_sep %>%
dplyr::group_by(lat, lon) %>% #Designate unique lat lon
dplyr::mutate(count = n()) #Create a new column with the counts
##Export as a csv file
directory <- getwd()
directory
#write.csv(occur_sf_order_new_subset, "C:/Users/JTroo/Desktop/Github/occurence_maps/occurrence-maps/filter_polygon/occur.csv", row.names = TRUE)
#So this is the exported dataframe for just taxonomy and geo coordinates.
write.csv(occurence_order_subset_sep_unique, "C:/Users/jtmil/OneDrive/Desktop/CCBER/occurrence-maps/filter_polygon/occur3", row.names = TRUE)
#occurence_order_subset_sep_unique
##Export as a csv file
directory <- getwd()
directory
#write.csv(occur_sf_order_new_subset, "C:/Users/JTroo/Desktop/Github/occurence_maps/occurrence-maps/filter_polygon/occur.csv", row.names = TRUE)
#So this is the exported dataframe for just taxonomy and geo coordinates.
write.csv(occurence_order_subset_sep_unique, "C:/Users/jtmil/OneDrive/Desktop/CCBER/occurrence-maps/filter_polygon/occur3.csv", row.names = TRUE)
#occurence_order_subset_sep_unique
occurrence_filtered <- read.csv("occur3.csv")
View(occurrence_filtered)
##Export as a csv file
directory <- getwd()
directory
#write.csv(occur_sf_order_new_subset, "C:/Users/JTroo/Desktop/Github/occurence_maps/occurrence-maps/filter_polygon/occur.csv", row.names = TRUE)
#So this is the exported dataframe for just taxonomy and geo coordinates.
write.csv(occurence_order_subset_sep_unique, "C:/Users/jtmil/OneDrive/Desktop/CCBER/occurrence-maps/filter_polygon/occur3.csv", row.names = TRUE, col.names = NA)
#occurence_order_subset_sep_unique
occurrence_filtered <- read.csv("occur3.csv")
?read.csv
occurrence_filtered <- read.csv("occur3.csv", header = TRUE)
View(occurrence_filtered)
write.csv?
?write.csv
occurence_filtered1 <- read.csv("occur.csv")
?read.csv
occurrence_filtered <- read.csv("occur3.csv", check.names = FALSE)
View(occurrence_filtered)
View(occurence_order_subset_sep_unique)
write.csv(occurence_order_subset_sep_unique, "C:/Users/jtmil/OneDrive/Desktop/CCBER/occurrence-maps/filter_polygon/occur3.csv",  col.names = NA)
occurrence_filtered <- read.csv("occur3.csv", check.names = FALSE)
?read.csv
View(occurrence_filtered)
occurrence_filtered <- read.csv("occur3.csv")
?read.csv
View(occurrence_filtered)
occurrence_filtered <- read.csv("occur3.csv", check.names = FALSE)
?read.csv
View(occurrence_filtered)
occurrence_filtered <- read.csv("occur3.csv", header = TRUE)
View(occurrence_filtered)
occurrence_filtered %>% rename(X = Order)
occurrence_filtered <- read.csv("occur3.csv", header = TRUE)
occurrence_filtered %>% rename(tax_order = X)
View(occurrence_filtered)
occureence_filtered_renamed <- occurrence_filtered %>% rename(tax_order = X)
View(occureence_filtered_renamed)
runApp('Map.App')
runApp('Map.App')
hym <- dplyr::filter(occurrence_filtered_renamed, tax_order %in% c("Hymenoptera", "Decapoda"))
occurrence_filtered <- read.csv("occur3.csv", header = TRUE)
occurrence_filtered_renamed <- occurrence_filtered %>% rename(tax_order = X)
hym <- dplyr::filter(occurrence_filtered_renamed, tax_order %in% c("Hymenoptera", "Decapoda"))
View(hym)
shiny::runApp('Map.App')
shiny::runApp('Map.App')
shiny::runApp('Map.App')
runApp('Map.App')
knitr::opts_chunk$set(echo = TRUE)
#If you havent installed these packages before, delete the '#' in front of the install.packages("") name and run the code. once this has been loaded make sure to re add the '#' so it isn't installed multiple times when running other code
#install.packages("ggplot2")
#install.packages("sf")
#install.packages("raster")
#install.packages("rgdal")
#install.packages("dplyr")
#install.packages("tidyr")
#install.packages("plotly")
#install.packages("tmap")
#required libraries
library(ggplot2) #library for visualization and plotting.
library(sf) #Spatial objects package, very useful for vector data types
library(raster) #Spatial object package for raster type data
library(rgdal) #Spatial objects
library(dplyr) #Cleaning and data wrangling
library(tidyr) #Very large package for data organization
library(plotly) #Makes ggplots interactive
library(tmap) #Another interactive map package
library(ggmap)
library(tidyverse)
#file that contains over 75K of specimen data with lat/long coordinates
specimen_data <- read.delim(file="occurrence.txt",header=TRUE)
#NOTE: If this returns Error in file(file, “rt”) : cannot open the connection, then most likely this is a path issue specific to your computer. First try changing the code to: specimen_data <- read.delim(file ="filter_polygon/occurrence.txt",header=TRUE)
#remove rows where order, lat/long do not exist
specimen_data <- subset(specimen_data, !is.na(order) & !is.na(decimalLongitude) & !is.na(decimalLatitude))
#read boundary from shp file
copr_boundary_2020 <- st_read("COPR_Boundary_2010/COPR_boundary2010.shp") #Vector type.
#NOTE: If this is unable to be read it may again be a path issue, try: copr_boundary_2020 <- st_read("filter_polygon/COPR_Boundary_2010/COPR_boundary2010.shp")
#What is the projection of copr_boundary_2020
#Global datum is NAD83. California zone 5 is code: ESPG:2229.
#A great site for looking up crs info: https://spatialreference.org/
crs(copr_boundary_2020)
crs(specimen_data) #NA so it hasnt been assigned a crs.
#Another method for storing crs's is to place them in a data column. Lets look at the names of the data columns.
names(specimen_data)
#There are some here that look like they could be right, however if you filter them out you will find that they do not yield a crs.
#While looking at these some important column names are 134 and 133 which contain decimal latitude and decimal longitude, as well as column 194 that contains taxonomic Order of the specimen found.
specimen_data_order <- specimen_data[c(134, 133, 194, 192 )]
#draw boundary from shp file
ggplot() +
geom_sf(data = copr_boundary_2020, fill = "palegreen", color = "black")
ggplot() +
geom_sf(data = copr_boundary_2020, fill = "palegreen", color = "black") +
geom_point(data = specimen_data_order, aes(x = decimalLongitude, y = decimalLatitude), shape = 1)
#No they will not plot together since they have different CRSs
#Technically the ESPG:4269 (NAD83) and ESPG:4326 (WGS84) are not equivalent, for most applications they can treated as equivalent.
#First lets change the txt. data into a sf object that uses the standard crs = 4326 for latlong.
occur_sf_order <- st_as_sf(specimen_data_order, coords = c('decimalLongitude', 'decimalLatitude'), crs = 4326)
extent(occur_sf_order)
extent(copr_boundary_2020)
#Now lets transform this new sf object to the crs using our boundary data
occur_sf_order_new <- st_transform(occur_sf_order,
st_crs(copr_boundary_2020))
#Check the extents, they appear to be in the same range
extent(occur_sf_order_new)
extent(copr_boundary_2020)
ggplot() +
geom_sf(data = copr_boundary_2020, fill = "palegreen", color = "black") +
geom_sf(occur_sf_order_new, mapping = aes(geometry = geometry), size = 1) +
ggtitle("Occurence of Plant Specimens at Coal Oil Point")
View(specimen_data_order)
#Okay, it seems that the data is including lots of points that are outside the specified range of the boundary shape
occur_sf_order_new_subset <- occur_sf_order_new[copr_boundary_2020,]
ggplot() +
geom_sf(data = copr_boundary_2020, fill = "palegreen", color = "black") +
geom_sf(data_hymenpotera, mapping = aes(geometry = geometry), size = 1) +
ggtitle("Occurence of Plant Specimens within Coal Oil Point")
unique(specimen_data$species)
knitr::opts_chunk$set(echo = TRUE)
#If you havent installed these packages before, delete the '#' in front of the install.packages("") name and run the code. once this has been loaded make sure to re add the '#' so it isn't installed multiple times when running other code
#install.packages("ggplot2")
#install.packages("sf")
#install.packages("raster")
#install.packages("rgdal")
#install.packages("dplyr")
#install.packages("tidyr")
#install.packages("plotly")
#install.packages("tmap")
#required libraries
library(ggplot2) #library for visualization and plotting.
library(sf) #Spatial objects package, very useful for vector data types
library(raster) #Spatial object package for raster type data
library(rgdal) #Spatial objects
library(dplyr) #Cleaning and data wrangling
library(tidyr) #Very large package for data organization
library(plotly) #Makes ggplots interactive
library(tmap) #Another interactive map package
library(ggmap)
library(tidyverse)
#file that contains over 75K of specimen data with lat/long coordinates
specimen_data <- read.delim(file="occurrence.txt",header=TRUE)
#NOTE: If this returns Error in file(file, “rt”) : cannot open the connection, then most likely this is a path issue specific to your computer. First try changing the code to: specimen_data <- read.delim(file ="filter_polygon/occurrence.txt",header=TRUE)
#remove rows where order, lat/long do not exist
specimen_data <- subset(specimen_data, !is.na(order) & !is.na(decimalLongitude) & !is.na(decimalLatitude))
#read boundary from shp file
copr_boundary_2020 <- st_read("COPR_Boundary_2010/COPR_boundary2010.shp") #Vector type.
#NOTE: If this is unable to be read it may again be a path issue, try: copr_boundary_2020 <- st_read("filter_polygon/COPR_Boundary_2010/COPR_boundary2010.shp")
#What is the projection of copr_boundary_2020
#Global datum is NAD83. California zone 5 is code: ESPG:2229.
#A great site for looking up crs info: https://spatialreference.org/
crs(copr_boundary_2020)
crs(specimen_data) #NA so it hasnt been assigned a crs.
#Another method for storing crs's is to place them in a data column. Lets look at the names of the data columns.
names(specimen_data)
#There are some here that look like they could be right, however if you filter them out you will find that they do not yield a crs.
#While looking at these some important column names are 134 and 133 which contain decimal latitude and decimal longitude, as well as column 194 that contains taxonomic Order of the specimen found.
specimen_data_order <- specimen_data[c(134, 133, 194)]
#draw boundary from shp file
ggplot() +
geom_sf(data = copr_boundary_2020, fill = "palegreen", color = "black")
ggplot() +
geom_sf(data = copr_boundary_2020, fill = "palegreen", color = "black") +
geom_point(data = specimen_data_order, aes(x = decimalLongitude, y = decimalLatitude), shape = 1)
#No they will not plot together since they have different CRSs
#Technically the ESPG:4269 (NAD83) and ESPG:4326 (WGS84) are not equivalent, for most applications they can treated as equivalent.
#First lets change the txt. data into a sf object that uses the standard crs = 4326 for latlong.
occur_sf_order <- st_as_sf(specimen_data_order, coords = c('decimalLongitude', 'decimalLatitude'), crs = 4326)
extent(occur_sf_order)
extent(copr_boundary_2020)
#Now lets transform this new sf object to the crs using our boundary data
occur_sf_order_new <- st_transform(occur_sf_order,
st_crs(copr_boundary_2020))
#Check the extents, they appear to be in the same range
extent(occur_sf_order_new)
extent(copr_boundary_2020)
ggplot() +
geom_sf(data = copr_boundary_2020, fill = "palegreen", color = "black") +
geom_sf(occur_sf_order_new, mapping = aes(geometry = geometry), size = 1) +
ggtitle("Occurence of Plant Specimens at Coal Oil Point")
#Okay, it seems that the data is including lots of points that are outside the specified range of the boundary shape
occur_sf_order_new_subset <- occur_sf_order_new[copr_boundary_2020,]
ggplot() +
geom_sf(data = copr_boundary_2020, fill = "palegreen", color = "black") +
geom_sf(data_hymenpotera, mapping = aes(geometry = geometry), size = 1) +
ggtitle("Occurence of Plant Specimens within Coal Oil Point")
unique(specimen_data$species)
filter_taxa <- function(data, kingdom = NULL, phylum = NULL, class = NULL, order = NULL, family = NULL, genus = NULL, species = NULL) { #create a function
if(!is.null(kingdom)){
kingdom_output <- data[data$kingdom %in% kingdom,]
}
if(!is.null(phylum)){
phylum_output <- data[data$phylum %in% phylum,]
}
if(!is.null(class)){
class_output <- data[data$class %in% class,]
}
if(!is.null(order)){
order_output <- data[data$order %in% order,]
}
if(!is.null(genus)){
genus_output <- data[data$genus %in% genus,]
}
if(!is.null(species)){
species_output <- data[data$species %in% species,]
}
return(c(kingdom_output, phylum_output))
}
test_taxa_filter <- filter_taxa(specimen_data, kingdom = "Animalia", phylum = "Arthropoda", class = "Insecta", order = "Hymenoptera", genus = "Augochlorella", species = "Augochlorella pomoniella" )
filter_taxa <- function(data, kingdom = NULL, phylum = NULL, class = NULL, order = NULL, family = NULL, genus = NULL, species = NULL) { #create a function
if(!is.null(kingdom)){
kingdom_output <- data[data$kingdom %in% kingdom,]
}
if(!is.null(phylum)){
phylum_output <- data[data$phylum %in% phylum,]
}
if(!is.null(class)){
class_output <- data[data$class %in% class,]
}
if(!is.null(order)){
order_output <- data[data$order %in% order,]
}
if(!is.null(genus)){
genus_output <- data[data$genus %in% genus,]
}
if(!is.null(species)){
species_output <- data[data$species %in% species,]
}
return(c(kingdom_output, phylum_output, class_ouput, order_output, genus_output, species_output))
}
test_taxa_filter <- filter_taxa(specimen_data, kingdom = "Animalia", phylum = "Arthropoda", class = "Insecta", order = "Hymenoptera", genus = "Augochlorella", species = "Augochlorella pomoniella" )
unique(specimen_data$class)
filter_taxa <- function(data, kingdom = NULL, phylum = NULL, class = NULL, order = NULL, family = NULL, genus = NULL, species = NULL) { #create a function
if(!is.null(kingdom)){
kingdom_output <- data[data$kingdom %in% kingdom,]
}
if(!is.null(phylum)){
phylum_output <- data[data$phylum %in% phylum,]
}
if(!is.null(class)){
class_output <- data[data$class %in% class,]
}
if(!is.null(order)){
order_output <- data[data$order %in% order,]
}
if(!is.null(genus)){
genus_output <- data[data$genus %in% genus,]
}
if(!is.null(species)){
species_output <- data[data$species %in% species,]
}
return(c(kingdom_output, phylum_output, class_ouput, order_output, genus_output, species_output))
}
test_taxa_filter <- filter_taxa(specimen_data, kingdom = "Animalia", phylum = "Arthropoda", class = "Insecta", order = "Hymenoptera", genus = "Augochlorella", species = "Augochlorella pomoniella" )
unique(specimen_data$class)
unique(specimen_data$familu)
unique(specimen_data$family)
filter_taxa <- function(data, kingdom = NULL, phylum = NULL, class = NULL, order = NULL, family = NULL, genus = NULL, species = NULL) { #create a function
if(!is.null(kingdom)){
kingdom_output <- data[data$kingdom %in% kingdom,]
}
if(!is.null(phylum)){
phylum_output <- data[data$phylum %in% phylum,]
}
if(!is.null(class)){
class_output <- data[data$class %in% class,]
}
if(!is.null(order)){
order_output <- data[data$order %in% order,]
}
if(!is.null(family)){
family_output <- data[data$family %in% order,]
}
if(!is.null(genus)){
genus_output <- data[data$genus %in% genus,]
}
if(!is.null(species)){
species_output <- data[data$species %in% species,]
}
return(c(kingdom_output, phylum_output, class_ouput, order_output, genus_output, species_output))
}
test_taxa_filter <- filter_taxa(specimen_data, kingdom = "Animalia", phylum = "Arthropoda", class = "Insecta", order = "Hymenoptera", family = "Halictidae",  genus = "Augochlorella", species = "Augochlorella pomoniella" )
filter_taxa <- function(data, kingdom = NULL, phylum = NULL, class = NULL, order = NULL, family = NULL, genus = NULL, species = NULL) { #create a function
if(!is.null(kingdom)){
kingdom_output <- data[data$kingdom %in% kingdom,]
}
if(!is.null(phylum)){
phylum_output <- data[data$phylum %in% phylum,]
}
if(!is.null(class)){
class_output <- data[data$class %in% class,]
}
if(!is.null(order)){
order_output <- data[data$order %in% order,]
}
if(!is.null(family)){
family_output <- data[data$family %in% order,]
}
if(!is.null(genus)){
genus_output <- data[data$genus %in% genus,]
}
if(!is.null(species)){
species_output <- data[data$species %in% species,]
}
df <- data(kingdom_output, phylum_output, class_output, order_output, family_output, genus_output, species_output)
return(df)
}
test_taxa_filter <- filter_taxa(specimen_data, kingdom = "Animalia", phylum = "Arthropoda", class = "Insecta", order = "Hymenoptera", family = "Halictidae",  genus = "Augochlorella", species = "Augochlorella pomoniella" )
filter_taxa <- function(data, kingdom = NULL, phylum = NULL, class = NULL, order = NULL, family = NULL, genus = NULL, species = NULL) { #create a function
if(!is.null(kingdom)){
kingdom_output <- data[data$kingdom %in% kingdom,]
}
if(!is.null(phylum)){
phylum_output <- data[data$phylum %in% phylum,]
}
if(!is.null(class)){
class_output <- data[data$class %in% class,]
}
if(!is.null(order)){
order_output <- data[data$order %in% order,]
}
if(!is.null(family)){
family_output <- data[data$family %in% order,]
}
if(!is.null(genus)){
genus_output <- data[data$genus %in% genus,]
}
if(!is.null(species)){
species_output <- data[data$species %in% species,]
}
df <- c(kingdom_output, phylum_output, class_output, order_output, family_output, genus_output, species_output)
return(df)
}
test_taxa_filter <- filter_taxa(specimen_data, kingdom = "Animalia", phylum = "Arthropoda", class = "Insecta", order = "Hymenoptera", family = "Halictidae",  genus = "Augochlorella", species = "Augochlorella pomoniella" )
filter_taxa <- function(data, kingdom = NULL, phylum = NULL, class = NULL, order = NULL, family = NULL, genus = NULL, species = NULL) { #create a function
if(!is.null(kingdom)){
kingdom_output <- data[data$kingdom %in% kingdom,]
}
if(!is.null(phylum)){
phylum_output <- data[data$phylum %in% phylum,]
}
if(!is.null(class)){
class_output <- data[data$class %in% class,]
}
if(!is.null(order)){
order_output <- data[data$order %in% order,]
}
if(!is.null(family)){
family_output <- data[data$family %in% order,]
}
if(!is.null(genus)){
genus_output <- data[data$genus %in% genus,]
}
if(!is.null(species)){
species_output <- data[data$species %in% species,]
}
data_compiled <- data(kingdom_output, phylum_output, class_output, order_output, family_output, genus_output, species_output)
df <- as.data.frame(data_compiled)
return(c(kingdom_output, phylum_output, class_ouput, order_output, genus_output, species_output))
}
test_taxa_filter <- filter_taxa(specimen_data, kingdom = "Animalia", phylum = "Arthropoda", class = "Insecta", order = "Hymenoptera", family = "Halictidae",  genus = "Augochlorella", species = "Augochlorella pomoniella" )
filter_taxa <- function(data, kingdom = NULL, phylum = NULL, class = NULL, order = NULL, family = NULL, genus = NULL, species = NULL) { #create a function
if(!is.null(kingdom)){
kingdom_output <- data[data$kingdom %in% kingdom,]
}
if(!is.null(phylum)){
phylum_output <- data[data$phylum %in% phylum,]
}
if(!is.null(class)){
class_output <- data[data$class %in% class,]
}
if(!is.null(order)){
order_output <- data[data$order %in% order,]
}
if(!is.null(family)){
family_output <- data[data$family %in% order,]
}
if(!is.null(genus)){
genus_output <- data[data$genus %in% genus,]
}
if(!is.null(species)){
species_output <- data[data$species %in% species,]
}
data_compiled <- data(kingdom_output, phylum_output, class_output, order_output, family_output, genus_output, species_output)
df <- as.data.frame(data_compiled)
return(df)
}
test_taxa_filter <- filter_taxa(specimen_data, kingdom = "Animalia", phylum = "Arthropoda", class = "Insecta", order = "Hymenoptera", family = "Halictidae",  genus = "Augochlorella", species = "Augochlorella pomoniella" )
filter_taxa <- function(data, kingdom = NULL, phylum = NULL, class = NULL, order = NULL, family = NULL, genus = NULL, species = NULL) { #create a function
if(!is.null(kingdom)){
kingdom_output <- data[data$kingdom %in% kingdom,]
}
if(!is.null(phylum)){
phylum_output <- data[data$phylum %in% phylum,]
}
if(!is.null(class)){
class_output <- data[data$class %in% class,]
}
if(!is.null(order)){
order_output <- data[data$order %in% order,]
}
if(!is.null(family)){
family_output <- data[data$family %in% order,]
}
if(!is.null(genus)){
genus_output <- data[data$genus %in% genus,]
}
if(!is.null(species)){
species_output <- data[data$species %in% species,]
}
#data_compiled <- data(kingdom_output, phylum_output, class_output, order_output, family_output, genus_output, species_output)
#df <- as.data.frame(data_compiled)
return(as.data.frame(c(kingdom_output, phylum_output, class_output, order_output, family_output, genus_output, species_output )))
}
test_taxa_filter <- filter_taxa(specimen_data, kingdom = "Animalia", phylum = "Arthropoda", class = "Insecta", order = "Hymenoptera", family = "Halictidae",  genus = "Augochlorella", species = "Augochlorella pomoniella" )
